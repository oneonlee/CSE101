# -*- coding: utf-8 -*-
"""kmp_algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wsUiWXaWKuIxv-udYnxqV463PD4z2ps-
"""

def init_next(pattern):
    M = len(pattern)
    next = [0 for _ in range(M)] # 정보 저장용 배열
    
    j = 0 # 배열의 값을 불러오고, 패턴의 인덱스에 접근
    for i in range(1, M): # 배열에 값 저장하기 위해 활용하는 인덱스
        # j가 0이 되거나, i와 j의 pattern 접근 값이 같아질 때까지 진행
        while j > 0 and pattern[i] != pattern[j]:
            j = next[j-1] # 이전의 일치한 곳까지 돌아가서 다시 비교
        
        # 값이 일치하는 경우, 
        if pattern[i] == pattern[j] :
            # j의 값을 1 증가시키고 그 값을 next에 갱신
            j += 1
            next[i] = j
    
    return next

def KMP(pattern, text):
    M = len(pattern)
    N = len(text)

    next = init_next(pattern)
    
    j = 0
    
    for i in range(N):
        # 단어와 패턴이 일치하지 않을 때
        while j > 0 and text[i] != pattern[j] :
            j = next[j-1] # 이전의 일치한 곳까지 돌아가서 다시 비교
        
        # 만약 j가 패턴의 끝까지 도달하였다면,
        if text[i] == pattern[j]:
            if j == M - 1 :
                print("패턴이 발생한 위치:", i - (M - 1))
                j = next[j] # 위치를 옮겨주고 다시 탐색
            else: # 해당 인덱스에서 값이 일치한다면, j를 1 증가시킴
                j += 1
    print("탐색 종료")

text1 = "ababababcababababcaabbabababcaab"
pattern1 = "abababca"
KMP(pattern1, text1)

text2 = "This class is an algorithm design class. Therefore, students will have time to learn about algorithms and implement each algorithm themselves."
pattern2 = "algorithm"
KMP(pattern2, text2)

